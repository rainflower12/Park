车辆部分：  X是所在行 y是所在列
init_car: flag=0,pre_flag=2
向上 x-1 flag=1 行减1 列不变
向下 x+1 flag=2 行加1 列不变
向左 y-1 flag=3 行不变 列减1
向右 y+1 flag=4 行不变 列加1

道路部分：
------------------------------------------------------------------------------------
道路行 [0, 1, 6, 7, 12, 13, 18, 19, 24, 25, 30, 31, 36, 37, 42, 43, 48, 49, 50]
道路列 [0, 1, 14, 15, 28, 29]
可以区分停车场
------------------------------------------------------------------------------------
十字路口 [(0,0) (0,1) ...]
左行行 [0, 6, 12, 18, 24, 30, 36, 42, 48, 49]
右行行 [1, 7, 13, 19, 25, 31, 37, 43, 49, 50]
上行列 [1,15,29]
下行列 [0,14,28]
用于车辆行驶指导
------------------------------------------------------------------------------------


十字路口逻辑： 如果这个点多个列表中，选择距离目标最近的列表 (增加最短路径算)
停车逻辑：定位是停车场，先找到最近的可行驶路，然后直接停入
从停车场出车逻辑：找到最近的可行驶路，然后直接驶出
车辆碰撞：在map中初始化一个汽车列表，记录每一个汽车的位置。 在car中有一个地图实例，获取地图实例中汽车的坐标然后进行碰撞检测。
	 并且在车辆运行方向上，如果有车，停下。

超车逻辑：根据方向区分 向右前面有停车，遍历可以超过的目标位置，遍历可以行驶的超车道

地图导航：  导航就是给一个确定方向，怎么动还是要看车  车里面移动

------------------------------------------------------------------------------------
多线程以及线程安全问题：
10辆车同时运行:  
	move函数不能枷锁
	